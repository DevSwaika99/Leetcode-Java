/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode merge(ListNode left, ListNode right) {
        if (left==null) return right;
        if (right==null) return left;
        ListNode head = new ListNode(-1);
        ListNode tail  = head;
        while (left!=null && right!=null) {
            if (left.val<=right.val) {
                tail.next = left;
                tail = left;
                left = left.next;
            } else {
                tail.next = right;
                tail = right;
                right = right.next;
            }
        }
        if (left==null) tail.next = right;
        if (right==null) tail.next = left;
        return head.next;
    }
    
    public ListNode sortList(ListNode head) {
        if (head==null || head.next == null) return head;
        ListNode slow = head;
        ListNode fast = head.next;
        while (fast!=null && fast.next!=null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        ListNode left = head;
        ListNode right = slow.next;
        slow.next = null;
        left = sortList(left);
        right = sortList(right);
        ListNode ans = merge(left,right);
        return ans;
    }
}
